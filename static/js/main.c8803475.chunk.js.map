{"version":3,"sources":["components/TodoList/TodoList.jsx","API/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","todosSelected","searchTitle","handleSelect","value","setState","handleSerch","filteredByTitle","todo","title","toLowerCase","includes","filteredByStatus","completed","this","props","todos","checkedHandler","handlerSelectUserId","filterTodos","filter","className","onChange","e","target","type","placeholder","map","classNames","key","id","checked","readOnly","onClick","userId","React","Component","request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getUser","CurrentUser","currentUser","prevProps","clearSelectedUser","name","email","phone","App","selectedUserId","todoId","item","find","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c8803475.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    todosSelected: 'all',\n    searchTitle: '',\n  }\n\n  handleSelect = (value) => {\n    this.setState({\n      todosSelected: value,\n    });\n  }\n\n  handleSerch = (value) => {\n    this.setState({\n      searchTitle: value,\n    });\n  }\n\n  filteredByTitle = (todo) => {\n    const { searchTitle } = this.state;\n\n    if (todo.title !== null) {\n      return todo.title.toLowerCase().includes(searchTitle.toLowerCase());\n    }\n\n    return false;\n  }\n\n  filteredByStatus = (todo) => {\n    const { todosSelected } = this.state;\n\n    switch (todosSelected) {\n      case 'completed':\n        return todo.completed;\n      case 'active':\n        return !todo.completed;\n      default:\n        return true;\n    }\n  }\n\n  render() {\n    const { todos, checkedHandler, handlerSelectUserId } = this.props;\n    const { searchTitle } = this.state;\n    const filterTodos = todos\n      .filter(this.filteredByStatus)\n      .filter(this.filteredByTitle);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <form className=\"TodoList__form\">\n          <select\n            className=\"TodoList__input\"\n            onChange={(e) => {\n              this.handleSelect(e.target.value);\n            }}\n          >\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n          <input\n            type=\"text\"\n            value={searchTitle}\n            className=\"TodoList__input\"\n            placeholder=\"search by title\"\n            onChange={(e) => {\n              this.handleSerch(e.target.value);\n            }}\n          />\n        </form>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filterTodos.map(todo => (\n              <li\n                className={\n                  classNames('TodoList__item',\n                    'TodoList__item--checked',\n                    {\n                      'TodoList__item--unchecked':\n                        !todo.completed,\n                    })\n                }\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                    onChange={() => checkedHandler(todo.id)}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                  \"\n                  type=\"button\"\n                  onClick={() => handlerSelectUserId(todo.userId)}\n                >\n                  User #\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    userId: PropTypes.number.isRequired,\n  })).isRequired,\n  checkedHandler: PropTypes.func.isRequired,\n  handlerSelectUserId: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nconst request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const getAllTodos = () => request('/todos');\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../API/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    currentUser: {},\n  }\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then((result) => {\n        this.setState({\n          currentUser: result,\n        });\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      getUser(this.props.userId)\n        .then((result) => {\n          this.setState({\n            currentUser: result,\n          });\n        });\n    }\n  }\n\n  render() {\n    const { currentUser } = this.state;\n    const { clearSelectedUser } = this.props;\n\n    return (\n      <>\n        { currentUser === null ? (\n          <h2>Error load data from server</h2>\n        )\n          : (\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\">\n                <span>{`Selected user: ${currentUser.id}`}</span>\n              </h2>\n              <h3 className=\"CurrentUser__name\">{currentUser.name}</h3>\n              <p className=\"CurrentUser__email\">{currentUser.email}</p>\n              <p className=\"CurrentUser__phone\">{currentUser.phone}</p>\n              <button\n                type=\"button\"\n                className=\"button button__clear\"\n                onClick={() => clearSelectedUser()}\n              >\n                Clear\n              </button>\n            </div>\n          )}\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  clearSelectedUser: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './API/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getAllTodos()\n      .then((todos) => {\n        this.setState({ todos });\n      });\n  }\n\n  checkedHandler = (todoId) => {\n    this.setState((state) => {\n      const item = [...state.todos].find(element => element.id === todoId);\n\n      item.completed = !item.completed;\n\n      return {\n        todos: [...state.todos],\n      };\n    });\n  }\n\n  handlerSelectUserId = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            checkedHandler={this.checkedHandler}\n            handlerSelectUserId={this.handlerSelectUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}